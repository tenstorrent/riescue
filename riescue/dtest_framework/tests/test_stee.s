;#test.name       sample_test
;#test.author     dkoshiya@tenstorrent.com
;#test.arch       rv64
;#test.priv       machine super user any
;#test.env        virtualized bare_metal
;#test.secure_mode on
;#test.cpus       1
;#test.paging     sv39 sv48 sv57 disable any
;#test.category   arch
;#test.class      vector
;#test.features   ext_v.enable ext_fp.disable
;#test.tags       vectors vector_ld_st
;#test.summary
;#test.summary    This section is used for documenting of description of
;#test.summary    overall intention of the test and what each individual
;#test.summary    discrete_test(s) are supposed to verify
;#test.summary
;#test.summary    test01: sample test 1
;#test.summary
;#test.summary    test02: sample test 2
;#test.summary
;#test.summary



#####################
# Define random data here
#####################
;#random_data(name=data1, type=bits32, and_mask=0xfffffff0)
;#random_data(name=data2, type=bits20, and_mask=0xffffffff)
;#random_data(name=data3, type=bits22)

;#page_map(name=map1, mode=sv39)
;#page_map(name=map2, mode=sv48)
;#page_map(name=map3, mode=sv57)

#####################
# Define random address and page_mapping entries here
#####################
;#random_addr(name=lin1,  type=linear,   size=0x1000, and_mask=0xfffffffffffff000)
;#random_addr(name=phys1, type=physical, size=0x1000, and_mask=0xfffffffffffff000)
;#page_mapping(lin_name=lin1, phys_name=phys1, v=1, r=1, w=1, a=1, d=1, secure=1, pagesize=['4kb', '2mb', '1gb', '512gb', '256tb', 'any'])

# PMA Example
# There are following new PMA attributes available through ;#random_addr() API
# in_pma=1/0
# pma_read=1/0
# pma_write=1/0
# pma_execute=1/0
# pma_size=0x1000
# pma_memtype='memory'/'io'/'ch0'/'ch1'
# pma_amo_type='none'/'logical'/'swap'/'arithmetic'
# pma_cacheability='cacheable'/'noncacheable'
# pma_combining='noncombining'/'combining'
# pma_routing_to='coherent'/'noncoherent'
#
# Test writer can specify the pmacfg region using the ;#random_addr() API with specifying type=physical and in_pma=1 and pma_size=<size>
# Riescue will generate a random start address and will also generate the PMA configuration for the same and setup pmacfg with those values and attributes
# The test writer then can access the pmacfg region using the linear address generated by the ;#random_addr() API and expect an access fault if expected
# Riescue-D uses pmcfg31 to specify default DRAM region that is catch all (default 0-52bits PA)
# Riescue-D uses pmcfg30 to specify default IO region that is catch all (default 0-2gb)
# We know that pmcfg30 will take precedence over pmacfg31 and hence will have correct default dram/io ranges
#
;#random_addr(name=lin1p,  type=linear,   size=0x2000, and_mask=0xffffffffffffe000)
;#random_addr(name=phys1p, type=physical, size=0x2000, and_mask=0xffffffffffffe000, in_pma=1, pma_size=0x1000, pma_read=0, pma_write=0, pma_execute=0)
;#page_mapping(lin_name=lin1p, phys_name=phys1p, v=1, r=1, w=1, a=1, d=1)

;#random_addr(name=lin1_io,  type=linear,   size=0x1000, and_mask=0xfffffffffffff000)
;#random_addr(name=phys1_io, type=physical, size=0x1000, and_mask=0xfffffffffffff000)
;#page_mapping(lin_name=lin1_io, phys_name=phys1_io, v=1, r=1, w=1, a=1, d=1, pagesize=['4kb', '2mb'])

## Another random_data and page_mapping entry
#;#random_addr(name=lin2,  type=linear,   size=0x1000, and_mask=0x0000003ffffff000)
#;#random_addr(name=phys2, type=physical, size=0x1000, and_mask=0x0000003ffffff000)
#;#page_mapping(lin_name=lin2, phys_name=&random, v=1, r=1, w=1, x=1, a=1, secure=0, d=1, pagesize=['4kb'], page_maps=['map1', 'map2', 'map3'])

# Another random_data and page_mapping entry
;#random_addr(name=lin7,  type=linear,   size=0x2000, and_mask=0xffffffffffffe000)
;#random_addr(name=phys7, type=physical, size=0x2000, and_mask=0xffffffffffffe000)
;#page_mapping(lin_name=lin7, phys_name=phys7, v=1, r=1, w=1, x=1, a=1, d=1, pagesize=['4kb'])
;#page_mapping(lin_name=lin7+0x1000, phys_name=phys7+0x1000, v=1, r=1, w=1, x=1, a=1, d=1, pagesize=['4kb'])

# Another random_data and page_mapping entry
;#random_addr(name=lin3,  type=linear,   size=0x1000, and_mask=0xfffffffffffff000)
;#random_addr(name=phys3, type=physical, size=0x1000, and_mask=0xfffffffffffff000)
;#page_mapping(lin_name=lin3, phys_name=&random, v=1, r=1, w=1, a=1, d=1, pagesize=['1gb'])

;#random_addr(name=lin4,  type=linear,   size=0x1000, and_mask=0xfffffffffffff000)
;#random_addr(name=phys4, type=physical, size=0x1000, and_mask=0xfffffffffffff000)
;#page_mapping(lin_name=lin4, phys_name=&random, v=1, r=1, w=1, a=1, d=1, pagesize=['4kb'])

;#random_addr(name=lin5,  type=linear,   size=0x1000, and_mask=0xfffffffffffff000)
;#random_addr(name=phys5, type=physical, size=0x1000, and_mask=0xfffffffffffff000)
;#page_mapping(lin_name=lin5, phys_name=&random, v=1, r=1, w=1, a=1, d=1, g_nonleaf=1, pagesize=['256tb'])

;#random_addr(name=lin6,  type=linear,   size=0x205000, and_mask=0xffffffffffe00000)
;#random_addr(name=phys6, type=physical, size=0x205000, and_mask=0xffffffffffe00000)
;#page_mapping(lin_name=lin6, phys_name=phys6, v=1, r=1, w=1, a=1, d=1, pagesize=['2mb'])
;#page_mapping(lin_name=lin6+0x201000, phys_name=phys6+0x201000, v=1, r=1, w=1, a=1, d=1, pagesize=['4kb'])
;#page_mapping(lin_name=lin6+0x202000, phys_name=phys6+0x201000, v=1, r=1, w=1, a=1, d=1, pagesize=['4kb'])
;#page_mapping(lin_name=lin6+0x203000, phys_name=phys6+0x201000, v=0, r=1, w=1, a=1, d=1, pagesize=['4kb'])
;#page_mapping(lin_name=lin6+0x204000, phys_name=phys6+0x201000, v=0, r=1, w=1, a=1, d=1, pagesize=['4kb'])
;#page_mapping(lin_name=lin6+0x205000, phys_name=phys6+0x201000, v=1, r=1, w=1, a=1, d=1, pagesize=['4kb'])

# Another random_data and page_mapping entry
;#reserve_memory(start_addr=0x500000000, addr_type=linear, size=0x1000)
;#reserve_memory(start_addr=0x600000000, addr_type=linear, size=0x1000)
;#reserve_memory(start_addr=0x500000000, addr_type=physical, size=0x1000)
#
;#page_mapping(lin_addr=0x500000000, phys_addr=0x500000000, v=1, r=1, w=1, x=1, a=1, d=1, pagesize=['4kb'], modify_pt=1)
;#page_mapping(lin_addr=0x600000000, phys_name=&random, v=1, r=1, w=1, x=1, a=1, d=1, pagesize=['4kb'], modify_pt=1)

;#random_addr(name=lin21,  type=linear,   size=0x1000, and_mask=0xfffffffffffff000)
;#reserve_memory(start_addr=0x2000000, addr_type=physical, size=0x1000)
;#page_mapping(lin_name=lin21, phys_addr=0x2000000, v=1, r=1, w=1, x=1, a=1, d=1, pagesize=['4kb'])

;#random_addr(name=my_code_page,  type=linear,   size=0x1000, and_mask=0xfffffffffffff000)
;#random_addr(name=my_code_page_phys, type=physical, size=0x1000, and_mask=0xfffffffffffff000)
;#page_mapping(lin_name=my_code_page, phys_name=&random, v=1, u=1, x=1, r=1, w=1, a=1, d=1, pagesize=['4kb'])


# Code section for the switch to super mode
.section .code_super_0, "ax"
    # Return to testmode
    li x31, 0xf0001004
    ecall

# Code section for the switch to user mode
.section .code_user_0, "ax"
    # Return to testmode
    li x31, 0xf0001004
    ecall

# Code section for the switch to machine mode
.section .code_machine_0, "ax"
    # Return to testmode
    li x31, 0xf0001004
    ecall

.section .code, "ax"

#####################
# test_setup: RiESCUE defined label
#             Add code below which is needed as common initialization sequence
#             for entire testcase (simulation)
#             This label is executed exactly once _before_ running any of the
#             discrete_test(s)
#####################
test_setup:
    # Put your common initialization code here, e.g. initialize csr here if needed
    li x1, 0xc0010001
.if OS_DELEG_EXCP_TO_MACHINE
    # Now try to switch to machine mode
    li x31, 0xf0001001 # Switch to machine mode
    ecall

    li x31, 0xf0001002 # Switch to super mode
    ecall

    # Do some setup that you could only do in machine mode
    # Write mstatus csr
    li x1, 0x00000000
    # csrw mstatus, x1

    # Now try to switch to user mode
    li x31, 0xf0001003 # Switch to user mode
    ecall

    # Do some setup that you could only do in machine mode
    # Write mstatus csr
    li x1, 0x00000000
    # csrw mstatus, x1

.endif

    j passed


#####################
# test01: sample test 1
#####################
;#discrete_test(test=test01)
test01:
    nop
    li t0, data2
    li t1, 0xdeadbeef

    li t1, lin21 # <-- use lin1 as an address for ld/st
    lwu t2, 0(t1)

    li t1, lin1 # <-- use lin1 as an address for ld/st
    lwu t2, 0(t1)

    li t1, lin3 # <-- use lin1 as an address for ld/st
    lwu t2, 0(t1)

    li t1, lin4 # <-- use lin1 as an address for ld/st
    lwu t2, 0(t1)

    li t1, lin5 # <-- use lin1 as an address for ld/st
    lwu t2, 0(t1)

    li t1, lin6 # <-- use lin1 as an address for ld/st
    lwu t2, 0(t1)

    li t1, lin6 + 0x201000 # <-- use lin1 as an address for ld/st
    lwu t2, 0(t1)

    li t1, lin7 # <-- use lin1 as an address for ld/st
    lwu t2, 0(t1)

    li t1, lin7 + 0x1000 # <-- use lin1 as an address for ld/st
    lwu t2, 0(t1)

    li t1, 0xc001c0de
    # bne t1, t2, failed

#    # Access my_code_page in user mode with u=1
#    li x1, my_code_page
#    jalr x1, x1, 0
#
#    # Switch to supervisor mode
#    li x31, 0xf0001002
#    ecall
#
#    # We are in supervisor mode now, access my_code_page in supervisor mode again
#    # But since that's going to cause an exception since u=1 for that page and supervisor
#    # can never execute user pages
#    # So, first setup the exception handler checks
#     OS_SETUP_CHECK_EXCP INSTRUCTION_PAGE_FAULT, excp_test01, ret_test01
#
#     li x1, my_code_page
# excp_test01:
#     jalr x1, x1, 0
#     j failed
#
# ret_test01:
#     # Switch back to testmode
#     li x31, 0xf0001004
#     ecall


    # 'passed' and 'failed' are special RiESCUE defined labels, which each
    # discrete_test must use to indicate the end of the discrete_test

    # j failed  <-- 'j failed' should be used to indicate OS that discrete_test
    #               hit a fail condition and gracefully exit the test with errorcode

    j passed  # <-- 'j passed' should be used to indicate OS that discrete_test
    #               hit a pass condition and OS is free to schedule the next test


#####################
# test02: sample test 2
#####################
;#discrete_test(test=test02)
test02:
    addi x0, x0, 0
    li t1, 0xfeedbeef
    li t1, data  # t1 = my_data
    lwu t2, 0(t1)

    li t1, 0xc001c0de
    bne t1, t2, failed

    # Call and return from a user defined section
    li x1, 0x500000000
    jalr x3, x1, 0


    j passed

#####################
# test03: sample test 3
#####################
;#discrete_test(test=test03)
test03:
    li x1, 0xc0010003

.ifne PMA_ENABLED
    # Setup expected values for access fault
    OS_SETUP_CHECK_EXCP LOAD_ACCESS_FAULT, excp3a, excp3a_ret, lin1p

    li x1, lin1p
excp3a:
    lwu t3, 0(x1)

excp3a_ret:
    # Setup expected values for access fault
    OS_SETUP_CHECK_EXCP STORE_ACCESS_FAULT, excp3b, excp3b_ret, lin1p

    li x1, lin1p
    li t3, 0
excp3b:
    sw t3, 0(x1)

.endif

excp3b_ret:
    j passed

#####################
# test_cleanup: RiESCUE defined label
#             Add code below which is needed to perform any cleanup activity
#             This label is executed exactly once _after_ running all of the
#             discrete_test(s)
#####################
test_cleanup:
    # Put your common initialization code here, e.g. initialize csr here if needed
    li x1, 0xc0010002
    j passed


#####################
# Default data section
#####################
.section .data
my_data:
    .dword 0xc001c0de
    .dword 0xdeadbeee


#####################
# User defined data section located at address lin1
#####################
;#init_memory @lin1
# -> we convert above syntax to this -> .section .lin1
my_data1:
    li x28, 0xc001c0de

    .dword 0xc001c0de


#####################
# Another user defined data section located at address lin2 that has code
#####################
;#init_memory @lin3
    .dword 0xc001c0de

#####################
# Another user defined data section located at address lin2 that has code
#####################
;#init_memory @lin4
    .dword 0xc001c0de

#####################
# Another user defined data section located at address lin2 that has code
#####################
;#init_memory @lin5
    jr x3   # jump to
    .dword 0xc001c0de

#####################
# Another user defined data section located at address lin2 that has code
#####################
;#init_memory @lin6
    .dword 0xc001c0de
.org 0x1000
    .dword 0xc001daad

#####################
# Another user defined data section located at address lin2 that has code
#####################
;#init_memory @lin7
    .dword 0xc001c0de
.org 0x1000
    .dword 0xc001daad

#####################
# Another user defined data section located at address lin2 that has code
#####################
;#init_memory @0x600000000
    jr x3   # jump to
    .dword 0xc001c0de

#####################
# Another user defined data section located at address lin2 that has code
#####################
;#init_memory @0x500000000
    jr x3   # jump to
    .dword 0xc001c0de

#####################
# Another user defined data section located at address lin2 that has code
#####################
;#init_memory @my_code_page
    ret
    jr x3   # jump to
    .dword 0xc001c0de
